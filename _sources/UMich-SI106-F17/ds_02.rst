.. _discussion_section_02:

Week 2 Discussion Section
-------------------------

.. activecode:: ds_02_01
    :include: sqrt_fn
    :language: python
    :autograde: unittest
    :hidecode:

    **1.** Suppose the ``sqrt()`` function returns the square root of its arguments. Write a statement that will assign a variable ``c`` to the square root of ``a`` squared plus the value of ``b`` squared (Pythagorean theorem).
    ~~~~
    a = 3.0
    b = 4.0

    # Write your code here!


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertAlmostEqual(c, 5.0, 7, "Testing that c has the correct value")
        def testTwo(self):
            self.assertIn('sqrt', self.getEditorText(), "Testing that sqrt is in your code. (Don't worry about Actual and Expected Values.)")

    myTests().main()


.. activecode:: ds_02_02
    :language: python
    :autograde: unittest
    :hidecode:

    **2.** Write code that asks the user to enter their name and then prints out ``"Hello, <name>!"``.
    ~~~~

    # Write your code here!


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testOne(self):
            self.assertIn('input', self.getEditorText(), "Testing that 'input' is in your code. (Don't worry about Actual and Expected Values.)")

    myTests().main()


.. activecode:: ds_02_03
    :language: python
    :autograde: unittest
    :hidecode:

    **3.** Write code that asks the user to enter a temperature in Fahrenheit and prints that temperature in Celsius. The formula to convert Fahrenheit to Celsius is: C = (F-32)*5/9. For example, if the user enters 90, your program should output 32.222. If the user enters -20, your code should output -28.888.
    ~~~~

    # Write your code here!


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testOne(self):
            self.assertIn('input', self.getEditorText(), "Testing that 'input' is in your code. (Don't worry about Actual and Expected Values.)")

    myTests().main()


**4.** Here's a complicated expression, using the Turtle framework. Arrange these sentences in the order they are executed in the following code, like you did in an exercise in Chapter 2 of the textbook. (It may help to think about what specifically is happening in the first four lines of code as well.)

    .. sourcecode:: python

         import turtle

         ella = turtle.Turtle()
         x = "hello class".find("o") - 1
         ella.speed = 3


         ella.move(square(x*ella.speed))

    .. parsonsprob:: ds_02_04

       Order the code fragments in the order in which the Python interpreter would evaluate them, when evaluating that last line of code.

       -----
       Look up the variable ella and find that it is an instance of a Turtle object
       =====
       Look up the attribute move of the Turtle ella and find that it's a method object
       =====
       Look up the function square
       =====
       Look up the value of the variable x and find that it is an integer
       =====
       Look up the value of the attribute speed of the instance ella and find that it is an integer
       =====
       Evaluate the expression x * ella.speed to one integer
       =====
       Call the function square on an integer value
       =====
       Call the method .move of the Turtle ella on its input integer


**5.** Here's another complicated expression. Arrange these sentences in the order they are executed in the following code.

    .. sourcecode:: python

        x = 2
        y = 3
        square(x + sub(square(y), 2*x))

    .. parsonsprob:: ds_02_05

       Order the code fragments in the order in which the Python interpreter would evaluate them, when evaluating that last line of code.

       -----
       look up the variable square to get the function object
       =====
       look up the variable x to get 2
       =====
       look up the variable sub to get the function object
       =====
       look up square, again, to get the function object
       =====
       look up the variable y to get 3
       =====
       run the square function on input 3, returning the value 9
       =====
       look up the variable x again, to get 2
       =====
       multiply 2 * 2 to get 4
       =====
       run the sub function, passing inputs 9 and 4, returning the value 5
       =====
       add 2 and 5 to get 7
       =====
       run the square function, again, on input 7, returning the value 49


.. activecode:: ds_02_06
    :language: python
    :autograde: unittest
    :hidecode:

    **6.** Write code that assigns ``last_elem`` to the **last** element of the sequence ``S``. Don't hard-code your answer (in other words, if we changed ``S``, your answer should still be valid)
    ~~~~
    S = ["ab", "cd", "ef", "gh"]

    # Write your code here!


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            self.assertEqual(last_elem, "gh", "Testing that last_elem is assigned to 'gh'")

    myTests().main()


.. activecode:: sqrt_fn
    :language: python
    :nopre:
    :hidecode:

    (This is not a question) The code below defines the function ``sqrt()``. Do not modify it, but feel free to take a look.

    ~~~~

    def sqrt(num):
        return num**0.5
