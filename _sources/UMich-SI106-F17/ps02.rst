.. _problem_set_02:

Problem Set 2
-------------

**Instructions:** Write the code you want to save in the provided boxes, and click **Save & Run** for each one. That will  *run* your code, so you can see the output, if any, and the result of the tests, if there are any. It will also *save* your code. You should run your code each time you want to save it. You can then load the history of the code you have run and saved. The *last* code you have saved for each problem by the deadline is what will be graded.


.. activecode:: ps_02_01
    :language: python
    :autograde: unittest
    :hidecode:

    **1.** Write one for loop to print out each element of the list ``several_things``. Then, write *another* for loop to print out the TYPE of each element of the list called ``several_things``. To complete this problem you should have written two different for loops, each of which iterates over the list ``several_things``, but each of those 2 for loops should have a different result.
    ~~~~
    several_things = ["hello", 2, 4, 6.0, 7.5, 234352354, "the end", "", 99]

    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

      def test_output(self):
          self.assertIn('for', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
          self.assertIn("<class 'str'>\n<class 'int'>\n<class 'int'>\n<class 'float'>\n<class 'float'>\n<class 'int'>\n<class 'str'>\n<class 'str'>\n<class 'int'>", self.getOutput(), "Testing output (Don't worry about actual and expected values).")

    myTests().main()

.. activecode:: ps_02_02
    :language: python
    :autograde: unittest
    :hidecode:

    **2.** Write code that uses iteration to print out each element of the list stored in ``excited_words``, BUT print out only the **first character** of each element. You should see:

    ::

           h
           g
           w
           I

    ~~~~
    excited_words = ["hello!", "goodbye!", "wonderful!", "I love Python?"]

    # Write your code here.
    =====
    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

    def test_output(self):
        self.assertIn('for', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
        self.assertIn("h\ng\nw\nI", self.getOutput(), "Testing output (Don't worry about actual and expected values).")

    myTests().main()


.. activecode:: ps_02_03
    :language: python
    :autograde: unittest
    :hidecode:

    **3.** Write code to count the number of characters in ``original_str`` using the accumulation pattern and assign the answer to a variable ``num_chars_sent``. Do NOT use the ``len`` function to solve the problem (if you use it while you are working on this problem, comment it out afterward!)
    ~~~~
    original_str = "The quick brown rhino jumped over the extremely lazy fox."


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testOne(self):
           self.assertEqual(num_chars_sent, len(original_str), "Testing whether num_chars_sent has the correct value")
           self.assertNotIn('len', self.getEditorText(), "Testing that you are not including the len function in your code. (Don't worry about Actual and Expected Values.)")

    myTests().main()

.. activecode:: ps_02_04
    :language: python
    :autograde: unittest
    :hidecode:

    **4.** Write code to create a **list of word lengths** for the words in ``original_str`` using the accumulation pattern and assign the answer to a variable ``num_words_list``. (You should use the ``len`` function).

    ~~~~
    original_str = "The quick brown rhino jumped over the extremely lazy fox."


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testOne(self):
           self.assertEqual(num_words_list, map(len, original_str.split()), "Testing whether num_words_list has the correct value")
           self.assertIn('for', self.getEditorText(), "Testing that you are using a for loop in your code. (Don't worry about Actual and Expected Values.)")

    myTests().main()

.. activecode:: ps_02_05
    :language: python
    :autograde: unittest
    :hidecode:

    **5.** ``addition_str`` is a string with a list of numbers separated by the ``+`` sign. Write code that uses the accumulation pattern to take the sum of all of the numbers and assigns it to ``sum_val`` (an integer). (You should use the ``.split("+")`` function to split by ``"+"`` and ``int()`` to cast to an integer).

    ~~~~
    addition_str = "2+5+10+20"


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testOne(self):
           self.assertEqual(sum_val, 37, "Testing whether sum_val has the correct value")

    myTests().main()

.. activecode:: ps_02_06
    :language: python
    :autograde: unittest
    :hidecode:

    **6.** ``temps_f`` is a string with a list of fahrenheit temperatures separated by the ``,`` sign. Write code that uses the accumulation pattern to compute the **average** (sum divided by number of items) and assigns it to ``avg_temp``. Do not hard code your answer (either the sum or the number of items in ``week_temps_f``) (You should use the ``.split(",")`` function to split by ``","`` and ``float()`` to cast to a float).

    ~~~~
    week_temps_f = "75.1,77.7,83.2,82.5,81.0,79.5,85.7"


    =====

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def testOne(self):
            self.assertAlmostEqual(avg_temp, 80.67142857142858, 7, "Testing that avg_temp has the correct value")

    myTests().main()
